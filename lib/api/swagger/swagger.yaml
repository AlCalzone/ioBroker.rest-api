# Use for editing http://editor.swagger.io/
swagger: "2.0"
info:
  description: "This is a REST server for ioBroker."
  version: "1.0.0"
  title: "ioBroker Swagger UI"
  contact:
    email: "admin@iobroker.net"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
basePath: "/v1"
#schemes:
#  - http
#  - https
tags:
  - name: "state"
    description: "Read, write the states"
  - name: "object"
    description: "Read the objects"
  - name: "history"
    description: "Read the history"
  - name: "enum"
    description: "Read the categories"
securityDefinitions:
  basicAuth:
    type: basic
security:
  - basicAuth: []
paths:
  /state/{stateId}:
    x-swagger-router-controller: state
    get:
      tags:
        - "state"
      summary: "Read value and all attributes of the state"
      description: "This path could be used for controlling of the state too. If you provide the value in request, so it will be handled as write request. For back compatibility with simple-api"
      operationId: "readState"
      produces:
        - "application/json"
      parameters:
        - name: "stateId"
          in: "path"
          description: "ID of the state to return"
          required: true
          type: "string"
        - name: "withInfo"
          in: "query"
          description: "If with object information "
          type: "boolean"
        - in: "query"
          name: "timeout"
          description: "Wait till the value written in ms"
          required: false
          type: "integer"
          format: "int64"
        - in: "query"
          name: "value"
          description: "Value to write into state"
          type: "string"

      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/State"
        404:
          description: "State not found"
        400:
          description: "Invalid state ID supplied"
    patch:
      tags:
        - "state"
      summary: "Update the value of the state"
      description: ""
      operationId: "updateState"
      consumes:
        - "application/octet-stream"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "stateId"
          description: "ID of the state to write"
          required: true
          type: "string"
        - in: "query"
          name: "timeout"
          description: "Wait till the value written in ms"
          required: false
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/State"
        400:
          description: "Invalid state ID supplied"
        404:
          description: "State not found"
        405:
          description: "Invalid value"
  /state/{stateId}/toggle:
    x-swagger-router-controller: state
    get:
      tags:
        - "state"
      summary: "Toggle value of the state"
      operationId: "toggleState"
      parameters:
        - name: "stateId"
          in: "path"
          description: "ID of the state to toggle"
          required: true
          type: "string"
        - name: "timeout"
          in: "query"
          description: "Timeout in ms for the state will be updated again, e.g. for ack=true"
          type: "number"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/State"
        404:
          description: "State not found"
        400:
          description: "Invalid state ID supplied"
  /state/{stateId}/plain:
    x-swagger-router-controller: state
    get:
      tags:
        - "state"
      summary: "Get only value of the state."
      operationId: "plainState"
      produces:
        - "text/plain;charset=UTF-8"
      parameters:
        - name: "stateId"
          in: "path"
          description: "ID of the state to read"
          required: true
          type: "string"
        - name: "extraPlain"
          in: "query"
          description: "If value.toString() should be returned. Without this flag JSON.stringify(value) will be returned"
          type: "boolean"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/State"
        404:
          description: "State not found"
        400:
          description: "Invalid state ID supplied"
  /state/{stateId}/subscribe:
    x-swagger-router-controller: state
    get:
      tags:
        - "state"
      summary: "Subscribe on state changes"
      description: "Subscribe on state changes"
      operationId: "subscribeStateGet"
      produces:
        - "application/json"
      parameters:
        - name: "stateId"
          in: "path"
          description: "ID of the state to toggle"
          required: true
          type: "string"
        - name: "method"
          in: "query"
          required: true
          description: "method=polling forces subscribe via long polling"
          enum: [ polling, POST, GET, PUT, PATCH ]
          type: "string"
        - name: "onchange"
          type: "boolean"
          description: "If the updates must be delivered if the value changed"
          in: "query"
        - name: "delta"
          type: "number"
          description: "Minimal delta to trigger the event"
          in: "query"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/State"
        404:
          description: "State not found"
        400:
          description: "Invalid state ID supplied"
    post:
      tags:
        - "state"
      summary: "Subscribe on state changes"
      description: "Subscribe on state changes"
      operationId: "subscribeState"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "stateId"
          in: "path"
          description: "ID of the state to toggle"
          required: true
          type: "string"
        - name: "subscribe"
          in: "body"
          description: "Subscribe request"
          required: false
          schema:
            $ref: "#/definitions/UrlHook"
        - name: "method"
          in: "query"
          description: "method=polling forces subscribe via long polling"
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/State"
        404:
          description: "State not found"
        400:
          description: "Invalid state ID supplied"
    delete:
      tags:
        - "state"
      summary: "Unsubscribe from state changes"
      description: "Unsubscribe on state changes"
      operationId: "unsubscribeState"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "stateId"
          in: "path"
          description: "ID of the state to unsubscribe"
          required: true
          type: "string"
        - name: "subscribe"
          in: "body"
          description: "Subscribe request"
          required: false
          schema:
            $ref: "#/definitions/UrlHook"
      responses:
        200:
          description: "successful operation"
        404:
          description: "State not found"
        400:
          description: "Invalid state ID supplied"
  /states:
    x-swagger-router-controller: state
    get:
      tags:
        - "state"
      summary: "Get list of states"
      operationId: "listStates"
      produces:
        - "application/json"
      parameters:
        - name: "filter"
          in: "query"
          description: "Filter, like modbus.0.*"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/State"
        400:
          description: "Invalid filter supplied"
  /states/subscribe:
    x-swagger-router-controller: state
    get:
      tags:
        - "state"
      summary: "Read current subscribes"
      operationId: "getStatesSubscribes"
      produces:
        - "application/json"
      parameters:
        - name: "method"
          in: "query"
          required: true
          description: "The same method as by subscription"
          enum: [ polling, POST, GET, PUT, PATCH ]
          type: "string"
        - name: "url"
          description: "The same URL as by subscription. By polling it must be omitted"
          in: "query"
          type: "string"
        - name: "sid"
          in: "query"
          type: "string"
          description: "Only if method=polling: session ID"
      responses:
        200:
          description: "successful operation"
        404:
          description: "URL or session not found"
        422:
          description: "Invalid parameters supplied"
    post:
      tags:
        - "state"
      summary: "Subscribe for state updates"
      operationId: "subscribeStates"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "Subscribe"
          in: "body"
          description: "URL of web hook and the subscribe pattern"
          required: true
          schema:
            $ref: "#/definitions/UrlHookWithPattern"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid filter supplied"
    delete:
      tags:
        - "state"
      summary: "Unsubscribe from state updates."
      description: "If no filter provided, all subscribes will be cleared for this web hook"
      operationId: "unsubscribeStates"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "UnSubscribe"
          in: "body"
          description: "URL of web hook and the unsubscribe pattern"
          required: true
          schema:
            $ref: "#/definitions/UrlHook"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid filter supplied"
  /object/{objectId}:
    x-swagger-router-controller: object
    get:
      tags:
        - "object"
      summary: "Read object"
      description: ""
      operationId: "readObject"
      produces:
        - "application/json"
      parameters:
        - name: "objectId"
          in: "path"
          description: "ID of the object to return"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Object"
        404:
          description: "Object not found"
        400:
          description: "Invalid object ID supplied"
    post:
      tags:
        - "object"
      summary: "Create the object"
      description: "Create new object. If object already exists, the error will be returned"
      operationId: "createObject"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "objectId"
          description: "ID of the object to write"
          required: true
          type: "string"
        - in: "body"
          name: "value"
          description: "Object"
          required: true
          schema:
            $ref: "#/definitions/Object"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Object"
        400:
          description: "Invalid object ID supplied"
        409:
          description: "Object already exists"
        405:
          description: "Invalid object structure"
    put:
      tags:
        - "object"
      summary: "Update the object"
      description: "To delete the parts of the object, set the value to 'null', like {\"common\": {\"desc\": null} to delete the \"common.desc\". If object does not exist it will be created"
      operationId: "updateObject"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "objectId"
          description: "ID of the object to write"
          required: true
          type: "string"
        - in: "body"
          name: "value"
          description: "Object"
          required: true
          schema:
            $ref: "#/definitions/Object"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Object"
        400:
          description: "Invalid object ID supplied"
        404:
          description: "Object not found"
        405:
          description: "Invalid object structure"
    delete:
      tags:
        - "object"
      summary: "Delete object"
      description: ""
      operationId: "deletedObject"
      produces:
        - "application/json"
      parameters:
        - name: "objectId"
          in: "path"
          description: "ID of the object to be deleted"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
        404:
          description: "Object not found"
        400:
          description: "Invalid object ID supplied"
  /object/{objectId}/subscribe:
    x-swagger-router-controller: object
    post:
      tags:
        - "object"
      summary: "Subscribe on object changes"
      description: "Subscribe on object changes"
      operationId: "subscribeObject"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "objectId"
          in: "path"
          description: "ID of the state to subscribe"
          required: true
          type: "string"
        - name: "url"
          in: "body"
          description: "URL of web hook"
          required: true
          schema:
            $ref: "#/definitions/UrlHook"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Object"
        404:
          description: "Object not found"
        400:
          description: "Invalid object ID supplied"
    delete:
      tags:
        - "object"
      summary: "Unsubscribe from object changes"
      description: "Unsubscribe on object changes"
      operationId: "unsubscribeObject"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "objectId"
          in: "path"
          description: "ID of the object to unsubscribe"
          required: true
          type: "string"
        - name: "subscribe"
          in: "body"
          description: "Subscribe request"
          required: true
          schema:
            $ref: "#/definitions/UrlHook"
      responses:
        200:
          description: "successful operation"
        404:
          description: "Object not found"
        400:
          description: "Invalid object ID supplied"
  /objects:
    x-swagger-router-controller: object
    get:
      tags:
        - "object"
      summary: "Get list of objects"
      operationId: "listObjects"
      produces:
        - "application/json"
      parameters:
        - name: "filter"
          in: "query"
          description: "Filter, like modbus.0.*"
          required: true
          type: "string"
        - name: "type"
          in: "query"
          description: "Type of objects"
          required: false
          type: "string"
          enum: [state, channel, device, enum, instance, adapter, host, chart, script, folder]
      responses:
        200:
          description: "successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/Object"
        404:
          description: "URL or session not found"
        422:
          description: "Invalid parameters supplied"
  /objects/subscribe:
    x-swagger-router-controller: object
    get:
      tags:
        - "state"
      summary: "Read current subscribes"
      operationId: "getObjectsSubscribes"
      produces:
        - "application/json"
      parameters:
        - name: "method"
          in: "query"
          required: true
          description: "method=polling forces subscribe via long polling"
          enum: [ polling, POST, GET, PUT, PATCH ]
          type: "string"
        - name: "url"
          description: "The same URL as by subscription. By polling it must be omitted"
          in: "query"
          type: "string"
        - name: "sid"
          in: "query"
          type: "string"
          description: "Only if method=polling: session ID"
      responses:
        200:
          description: "successful operation"
        404:
          description: "URL or session not found"
        422:
          description: "Invalid parameters supplied"
    post:
      tags:
        - "object"
      summary: "Subscribe for objects updates"
      operationId: "subscribeObjects"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "Subscribe"
          in: "body"
          description: "URL of web hook and the subscribe pattern"
          required: true
          schema:
            $ref: "#/definitions/UrlHookWithPattern"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid filter supplied"
    delete:
      tags:
        - "object"
      summary: "Unsubscribe from object updates"
      description: "If no filter provided, all the object subscribes will be cleared for this web hook"
      operationId: "unsubscribeObjects"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "Unsubscribe"
          in: "body"
          description: "URL of web hook and the unsubscribe pattern"
          required: true
          schema:
            $ref: "#/definitions/UrlHook"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid filter supplied"
  /getHistory:
    x-swagger-router-controller: history
    post:
      tags:
        - "history"
      summary: "Reads history"
      operationId: "postHistory"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "Options"
          in: "body"
          description: "Options for history"
          required: true
          schema:
            $ref: "#/definitions/HistoryRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/HistoryResponse"
        422:
          description: "Invalid options supplied"
  /getHistory/{stateId}:
    x-swagger-router-controller: history
    get:
      tags:
        - "history"
      summary: "Reads history"
      operationId: "getHistory"
      produces:
        - "application/json"
      parameters:
        - name: "stateId"
          in: "path"
          description: "State ID"
          type: "string"
          required: true
        - name: start
          in: "query"
          type: "number"
          description: "Start time in ms"
        - name: end
          in: "query"
          type: "number"
          description: "End time in ms"
        - name: count
          in: "query"
          type: "number"
          description: "number of values if aggregate is 'onchange' or number of intervals if other aggregate method. Count will be ignored if step is set, else default is 500 if not set"
        - name: from
          in: "query"
          type: "boolean"
          description: "if FROM field should be included in answer"
        - name: ack
          in: "query"
          type: "boolean"
          description: "if ACK field should be included in answer"
        - name: q
          in: "query"
          type: "boolean"
          description: "if Q field should be included in answer"
        - name: addId
          in: "query"
          type: "boolean"
          description: "if ID field should be included in answer"
        - name: limit
          in: "query"
          type: "number"
          description: "do not return more entries than limit"
        - name: ignoreNull
          in: "query"
          type: "boolean"
          description: "if null values should be included (false), replaced by last not null value (true) or replaced with 0 (0)"
        - name: removeBorderValues
          in: "query"
          type: "boolean"
          description: "By default additional border values are returned to optimize charting. Set this option to true if this is not wanted (e.g. for script data processing)"
        - name: returnNewestEntries
          in: "query"
          type: "boolean"
          description: "The returned data are always sorted by timestamp ascending. When using aggregate none and also providing count or limit this means that normally the oldest entries are returned (unless no start data is provided). Set this option to true to get the newest entries instead."
        - name: aggregate
          in: "query"
          type: "string"
          description: "Aggregation method"
          enum: [minmax, max, min, average, total, count, percentile, quantile, integral, none]
        - name: percentile
          in: "query"
          type: "number"
          description: "(optional) when using aggregate method percentile defines the percentile level (0..100)(defaults to 50)"
        - name: quantile
          in: "query"
          type: "number"
          description: "(optional) when using aggregate method quantile defines the quantile level (0..1)(defaults to 0.5)"
        - name: integralUnit
          in: "query"
          type: "string"
          description: "(optional) when using aggregate method integral defines the unit in seconds (defaults to 60s). e.g. to get integral in hours for Wh or such, set to 3600."
        - name: integralInterpolation
          in: "query"
          type: "string"
          description: "(optional) when using aggregate method integral defines the interpolation method (defaults to none)."
          enum: [linear, none]
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/HistoryResponse"
        422:
          description: "Invalid options supplied"
  /addHistory:
    x-swagger-router-controller: history
    post:
      tags:
        - "history"
      summary: "Add entry to history"
      operationId: "addHistoryByPost"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "Options"
          in: "body"
          description: "Options for add history"
          required: true
          schema:
            $ref: "#/definitions/HistoryAddRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/HistoryAddResponse"
        422:
          description: "Invalid options supplied"
  /addHistory/{stateId}:
    x-swagger-router-controller: history
    get:
      tags:
        - "history"
      summary: "Add entry to history"
      operationId: "addHistoryByGet"
      produces:
        - "application/json"
      parameters:
        - name: "stateId"
          in: "path"
          description: "State ID"
          type: "string"
          required: true
        - name: val
          in: "query"
          type: "number"
          description: "Value"
          required: true
        - name: ts
          in: "query"
          type: "number"
          description: "Timestamp in ms. If empty current time is used"
        - name: ack
          in: "query"
          type: "number"
          description: "Acknowledge flag"
        - name: q
          in: "query"
          type: "number"
          description: "Quality flag"
        - name: from
          in: "query"
          type: "number"
          description: "From which instance"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/HistoryAddResponse"
        422:
          description: "Invalid options supplied"
  /enum:
    x-swagger-router-controller: enum
    get:
      tags:
        - "enum"
      summary: "Reads categories of enums"
      operationId: "readMainEnums"
      produces:
        - "application/json"
      responses:
        200:
          description: "successful operation"
  /enum/{enumId}:
    x-swagger-router-controller: enum
    get:
      tags:
        - "enum"
      summary: "Reads enums of specific type"
      operationId: "readEnums"
      produces:
        - "application/json"
      parameters:
        - name: "enumId"
          in: "path"
          description: "Enum ID in form \"functions\" or \"room\" without \"enum.\""
          type: "string"
          required: true
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/EnumResponse"
        404:
          description: "Category not found"
# commands start
# commands stop
definitions:
  State:
    type: "object"
    properties:
      id:
        type: "string"
        description: "ID of the state"
      val:
        type: "string"
        description: "Actual value"
      q:
        type: "integer"
        format: "int32"
        description: "Quality"
      ts:
        type: "integer"
        format: "int64"
        description: "Timestamp in ms from epoch of last update"
      lc:
        type: "integer"
        format: "int64"
        description: "Timestamp in ms from epoch of last value change"
      ack:
        type: "boolean"
        description: "Is acknowledged. true = update, false = command"
      from:
        type: "string"
        description: "Instance, that wrote this value"
      expire:
        type: "integer"
        description: "Expire in seconds"
      type:
        type: "string"
        description: "Always = state"
      common:
        type: "object"
        description: "Common state description"
      native:
        type: "object"
        description: "Native state description"
  #Type:
  #  type: "string"
  #  enum: [state, channel, device, enum, instance, adapter, host, chart, script, folder]
  Object:
    type: "object"
    properties:
      _id:
        type: "string"
        description: "ID of the state"
      type:
        type: "string"
        description: "Type of this object"
        enum: [state, channel, device, enum, instance, adapter, host, chart, script, folder]
      common:
        type: "object"
        description: "Common state description"
      native:
        type: "object"
        description: "Native state description"
  UrlHook:
    type: "object"
    properties:
      url:
        type: "string"
        description: "URL"
      method:
        type: "string"
        description: "HTTP Method"
        enum: [ polling, POST, GET, PUT, PATCH ]
  UrlHookWithPattern:
    type: "object"
    required: [pattern]
    properties:
      url:
        type: "string"
        description: "URL"
      onchange:
        type: "boolean"
        description: "If the updates must be delivered if the value changed"
      pattern:
        type: "string"
        description: "Subscribe pattern like: \"system.adapter.admin.0.*\""
      method:
        type: "string"
        description: "HTTP Method"
        enum: [ polling, POST, GET, PUT, PATCH ]
  HistoryOptions:
    type: "object"
    #required: [pattern]
    properties:
      start:
        type: "number"
        description: "Start time in ms"
      end:
        type: "number"
        description: "End time in ms"
      count:
        type: "number"
        description: "number of values if aggregate is 'onchange' or number of intervals if other aggregate method. Count will be ignored if step is set, else default is 500 if not set"
      from:
        type: "boolean"
        description: "if FROM field should be included in answer"
      ack:
        type: "boolean"
        description: "if ACK field should be included in answer"
      q:
        type: "boolean"
        description: "if Q field should be included in answer"
      addId:
        type: "boolean"
        description: "if ID field should be included in answer"
      limit:
        type: "number"
        description: "do not return more entries than limit"
      ignoreNull:
        type: "boolean"
        description: "if null values should be included (false), replaced by last not null value (true) or replaced with 0 (0)"
      removeBorderValues:
        type: "boolean"
        description: "By default additional border values are returned to optimize charting. Set this option to true if this is not wanted (e.g. for script data processing)"
      returnNewestEntries:
        type: "boolean"
        description: "The returned data are always sorted by timestamp ascending. When using aggregate none and also providing count or limit this means that normally the oldest entries are returned (unless no start data is provided). Set this option to true to get the newest entries instead."
      aggregate:
        type: "string"
        description: "Aggregation method"
        enum: [minmax, max, min, average, total, count, percentile, quantile, integral, none]
      percentile:
        type: "number"
        description: "(optional) when using aggregate method percentile defines the percentile level (0..100)(defaults to 50)"
      quantile:
        type: "number"
        description: "(optional) when using aggregate method quantile defines the quantile level (0..1)(defaults to 0.5)"
      integralUnit:
        type: "string"
        description: "(optional) when using aggregate method integral defines the unit in seconds (defaults to 60s). e.g. to get integral in hours for Wh or such, set to 3600."
      integralInterpolation:
        type: "string"
        description: "(optional) when using aggregate method integral defines the interpolation method (defaults to none)."
        enum: [linear, none]
  HistoryRequest:
    type: "object"
    required: [id]
    properties:
      id:
        type: "string"
        description: "State ID"
      options:
        $ref: "#/definitions/HistoryOptions"
  HistoryEntry:
    type: "object"
    properties:
      val:
        type: "number"
        description: "Value"
      ts:
        type: "number"
        description: "Timestamp in ms"
      ack:
        type: "boolean"
        description: "Acknowledge flag. Will be returned only if ACK set true in request options"
      from:
        type: "boolean"
        description: "Acknowledge flag. Will be returned only if FROM set true in request options"
      q:
        type: "boolean"
        description: "Acknowledge flag. Will be returned only if Q set true in request options"
      id:
        type: "string"
        description: "State ID. Will be returned only if addId set true in request options"
  HistoryResponse:
    type: "array"
    items:
      $ref: "#/definitions/HistoryEntry"
  HistoryAddEntry:
    type: "object"
    properties:
      val:
        type: "number"
        description: "Value"
      ts:
        type: "number"
        description: "Timestamp in ms"
      ack:
        type: "boolean"
        description: "Acknowledge flag. Will be returned only if ACK set true in request options"
      from:
        type: "boolean"
        description: "Acknowledge flag. Will be returned only if FROM set true in request options"
      q:
        type: "boolean"
        description: "Acknowledge flag. Will be returned only if Q set true in request options"
  HistoryAddRequest:
    properties:
      id:
        type: "string"
        description: "State ID"
      state:
        $ref: "#/definitions/HistoryAddEntry"
  HistoryAddResponse:
    properties:
      success:
        type: "boolean"
        description: "true"
      error:
        type: "string"
        description: "Error description"
  EnumCommon:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Name can be string or object"
      icon:
        type: "string"
        description: "Icon for category (optional)"
      desc:
        type: "string"
        description: "Description can be string or object"
      members:
        type: "array"
        items:
          type: "string"
  EnumEntry:
    type: "object"
    properties:
      _id:
        type: "string"
        description: "Enum ID"
      common:
        $ref: "#/definitions/EnumCommon"
      type:
        type: "string"
        description: "Always enum"
  EnumResponse:
    type: "array"
    items:
      $ref: "#/definitions/EnumEntry"
externalDocs:
  description: "Find out more about ioBroker"
  url: "https://www.iobroker.net"
